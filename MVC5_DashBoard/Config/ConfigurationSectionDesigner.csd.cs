//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18408
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ND.MonitorDasboard.Web.Config
{
    
    
    /// <summary>
    /// The Monitor Configuration Element.
    /// </summary>
    public partial class Monitor : global::System.Configuration.ConfigurationElement
    {
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region ApplicationCode Property
        /// <summary>
        /// The XML name of the <see cref="ApplicationCode"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        internal const string ApplicationCodePropertyName = "applicationCode";
        
        /// <summary>
        /// Gets or sets the ApplicationCode.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        [global::System.ComponentModel.DescriptionAttribute("The ApplicationCode.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::ND.MonitorDasboard.Web.Config.Monitor.ApplicationCodePropertyName, IsRequired=true, IsKey=true, IsDefaultCollection=false)]
        public virtual string ApplicationCode
        {
            get
            {
                return ((string)(base[global::ND.MonitorDasboard.Web.Config.Monitor.ApplicationCodePropertyName]));
            }
            set
            {
                base[global::ND.MonitorDasboard.Web.Config.Monitor.ApplicationCodePropertyName] = value;
            }
        }
        #endregion
        
        #region ApplicationName Property
        /// <summary>
        /// The XML name of the <see cref="ApplicationName"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        internal const string ApplicationNamePropertyName = "applicationName";
        
        /// <summary>
        /// Gets or sets the ApplicationName.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        [global::System.ComponentModel.DescriptionAttribute("The ApplicationName.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::ND.MonitorDasboard.Web.Config.Monitor.ApplicationNamePropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual string ApplicationName
        {
            get
            {
                return ((string)(base[global::ND.MonitorDasboard.Web.Config.Monitor.ApplicationNamePropertyName]));
            }
            set
            {
                base[global::ND.MonitorDasboard.Web.Config.Monitor.ApplicationNamePropertyName] = value;
            }
        }
        #endregion
        
        #region RemotePort Property
        /// <summary>
        /// The XML name of the <see cref="RemotePort"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        internal const string RemotePortPropertyName = "remotePort";
        
        /// <summary>
        /// Gets or sets the RemotePort.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        [global::System.ComponentModel.DescriptionAttribute("The RemotePort.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::ND.MonitorDasboard.Web.Config.Monitor.RemotePortPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual int RemotePort
        {
            get
            {
                return ((int)(base[global::ND.MonitorDasboard.Web.Config.Monitor.RemotePortPropertyName]));
            }
            set
            {
                base[global::ND.MonitorDasboard.Web.Config.Monitor.RemotePortPropertyName] = value;
            }
        }
        #endregion
    }
}
namespace ND.MonitorDasboard.Web.Config
{
    
    
    /// <summary>
    /// The Node Configuration Element.
    /// </summary>
    public partial class Node : global::System.Configuration.ConfigurationElement
    {
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region MachineName Property
        /// <summary>
        /// The XML name of the <see cref="MachineName"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        internal const string MachineNamePropertyName = "machineName";
        
        /// <summary>
        /// Gets or sets the MachineName.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        [global::System.ComponentModel.DescriptionAttribute("The MachineName.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::ND.MonitorDasboard.Web.Config.Node.MachineNamePropertyName, IsRequired=true, IsKey=true, IsDefaultCollection=false)]
        public virtual string MachineName
        {
            get
            {
                return ((string)(base[global::ND.MonitorDasboard.Web.Config.Node.MachineNamePropertyName]));
            }
            set
            {
                base[global::ND.MonitorDasboard.Web.Config.Node.MachineNamePropertyName] = value;
            }
        }
        #endregion
        
        #region LifeResult Property
        /// <summary>
        /// The XML name of the <see cref="LifeResult"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        internal const string LifeResultPropertyName = "lifeResult";
        
        /// <summary>
        /// Gets or sets the LifeResult.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        [global::System.ComponentModel.DescriptionAttribute("The LifeResult.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::ND.MonitorDasboard.Web.Config.Node.LifeResultPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual int LifeResult
        {
            get
            {
                return ((int)(base[global::ND.MonitorDasboard.Web.Config.Node.LifeResultPropertyName]));
            }
            set
            {
                base[global::ND.MonitorDasboard.Web.Config.Node.LifeResultPropertyName] = value;
            }
        }
        #endregion
    }
}
namespace ND.MonitorDasboard.Web.Config
{
    
    
    /// <summary>
    /// The Cluster Configuration Element.
    /// </summary>
    public partial class Cluster : global::System.Configuration.ConfigurationElement
    {
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region Code Property
        /// <summary>
        /// The XML name of the <see cref="Code"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        internal const string CodePropertyName = "code";
        
        /// <summary>
        /// Gets or sets the Code.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        [global::System.ComponentModel.DescriptionAttribute("The Code.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::ND.MonitorDasboard.Web.Config.Cluster.CodePropertyName, IsRequired=true, IsKey=true, IsDefaultCollection=false)]
        public virtual string Code
        {
            get
            {
                return ((string)(base[global::ND.MonitorDasboard.Web.Config.Cluster.CodePropertyName]));
            }
            set
            {
                base[global::ND.MonitorDasboard.Web.Config.Cluster.CodePropertyName] = value;
            }
        }
        #endregion
        
        #region Label Property
        /// <summary>
        /// The XML name of the <see cref="Label"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        internal const string LabelPropertyName = "label";
        
        /// <summary>
        /// Gets or sets the Label.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        [global::System.ComponentModel.DescriptionAttribute("The Label.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::ND.MonitorDasboard.Web.Config.Cluster.LabelPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual string Label
        {
            get
            {
                return ((string)(base[global::ND.MonitorDasboard.Web.Config.Cluster.LabelPropertyName]));
            }
            set
            {
                base[global::ND.MonitorDasboard.Web.Config.Cluster.LabelPropertyName] = value;
            }
        }
        #endregion
        
        #region Nodes Property
        /// <summary>
        /// The XML name of the <see cref="Nodes"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        internal const string NodesPropertyName = "nodes";
        
        /// <summary>
        /// Gets or sets the Nodes.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        [global::System.ComponentModel.DescriptionAttribute("The Nodes.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::ND.MonitorDasboard.Web.Config.Cluster.NodesPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual global::ND.MonitorDasboard.Web.Config.Nodes Nodes
        {
            get
            {
                return ((global::ND.MonitorDasboard.Web.Config.Nodes)(base[global::ND.MonitorDasboard.Web.Config.Cluster.NodesPropertyName]));
            }
            set
            {
                base[global::ND.MonitorDasboard.Web.Config.Cluster.NodesPropertyName] = value;
            }
        }
        #endregion
        
        #region Environment Property
        /// <summary>
        /// The XML name of the <see cref="Environment"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        internal const string EnvironmentPropertyName = "environment";
        
        /// <summary>
        /// Gets or sets the Environment.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        [global::System.ComponentModel.DescriptionAttribute("The Environment.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::ND.MonitorDasboard.Web.Config.Cluster.EnvironmentPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual global::ND.MonitorDasboard.Web.Config.Environment Environment
        {
            get
            {
                return ((global::ND.MonitorDasboard.Web.Config.Environment)(base[global::ND.MonitorDasboard.Web.Config.Cluster.EnvironmentPropertyName]));
            }
            set
            {
                base[global::ND.MonitorDasboard.Web.Config.Cluster.EnvironmentPropertyName] = value;
            }
        }
        #endregion
    }
}
namespace ND.MonitorDasboard.Web.Config
{
    
    
    /// <summary>
    /// A collection of Monitor instances.
    /// </summary>
    [global::System.Configuration.ConfigurationCollectionAttribute(typeof(global::ND.MonitorDasboard.Web.Config.Monitor), CollectionType=global::System.Configuration.ConfigurationElementCollectionType.BasicMapAlternate, AddItemName=global::ND.MonitorDasboard.Web.Config.Monitors.MonitorPropertyName)]
    public partial class Monitors : global::System.Configuration.ConfigurationElementCollection
    {
        
        #region Constants
        /// <summary>
        /// The XML name of the individual <see cref="global::ND.MonitorDasboard.Web.Config.Monitor"/> instances in this collection.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        internal const string MonitorPropertyName = "monitor";
        #endregion
        
        #region Overrides
        /// <summary>
        /// Gets the type of the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <returns>The <see cref="global::System.Configuration.ConfigurationElementCollectionType"/> of this collection.</returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        public override global::System.Configuration.ConfigurationElementCollectionType CollectionType
        {
            get
            {
                return global::System.Configuration.ConfigurationElementCollectionType.BasicMapAlternate;
            }
        }
        
        /// <summary>
        /// Gets the name used to identify this collection of elements
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        protected override string ElementName
        {
            get
            {
                return global::ND.MonitorDasboard.Web.Config.Monitors.MonitorPropertyName;
            }
        }
        
        /// <summary>
        /// Indicates whether the specified <see cref="global::System.Configuration.ConfigurationElement"/> exists in the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="elementName">The name of the element to verify.</param>
        /// <returns>
        /// <see langword="true"/> if the element exists in the collection; otherwise, <see langword="false"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        protected override bool IsElementName(string elementName)
        {
            return (elementName == global::ND.MonitorDasboard.Web.Config.Monitors.MonitorPropertyName);
        }
        
        /// <summary>
        /// Gets the element key for the specified configuration element.
        /// </summary>
        /// <param name="element">The <see cref="global::System.Configuration.ConfigurationElement"/> to return the key for.</param>
        /// <returns>
        /// An <see cref="object"/> that acts as the key for the specified <see cref="global::System.Configuration.ConfigurationElement"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        protected override object GetElementKey(global::System.Configuration.ConfigurationElement element)
        {
            return ((global::ND.MonitorDasboard.Web.Config.Monitor)(element)).ApplicationCode;
        }
        
        /// <summary>
        /// Creates a new <see cref="global::ND.MonitorDasboard.Web.Config.Monitor"/>.
        /// </summary>
        /// <returns>
        /// A new <see cref="global::ND.MonitorDasboard.Web.Config.Monitor"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        protected override global::System.Configuration.ConfigurationElement CreateNewElement()
        {
            return new global::ND.MonitorDasboard.Web.Config.Monitor();
        }
        #endregion
        
        #region Indexer
        /// <summary>
        /// Gets the <see cref="global::ND.MonitorDasboard.Web.Config.Monitor"/> at the specified index.
        /// </summary>
        /// <param name="index">The index of the <see cref="global::ND.MonitorDasboard.Web.Config.Monitor"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        public global::ND.MonitorDasboard.Web.Config.Monitor this[int index]
        {
            get
            {
                return ((global::ND.MonitorDasboard.Web.Config.Monitor)(base.BaseGet(index)));
            }
        }
        
        /// <summary>
        /// Gets the <see cref="global::ND.MonitorDasboard.Web.Config.Monitor"/> with the specified key.
        /// </summary>
        /// <param name="applicationCode">The key of the <see cref="global::ND.MonitorDasboard.Web.Config.Monitor"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        public global::ND.MonitorDasboard.Web.Config.Monitor this[object applicationCode]
        {
            get
            {
                return ((global::ND.MonitorDasboard.Web.Config.Monitor)(base.BaseGet(applicationCode)));
            }
        }
        #endregion
        
        #region Add
        /// <summary>
        /// Adds the specified <see cref="global::ND.MonitorDasboard.Web.Config.Monitor"/> to the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="monitor">The <see cref="global::ND.MonitorDasboard.Web.Config.Monitor"/> to add.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        public void Add(global::ND.MonitorDasboard.Web.Config.Monitor monitor)
        {
            base.BaseAdd(monitor);
        }
        #endregion
        
        #region Remove
        /// <summary>
        /// Removes the specified <see cref="global::ND.MonitorDasboard.Web.Config.Monitor"/> from the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="monitor">The <see cref="global::ND.MonitorDasboard.Web.Config.Monitor"/> to remove.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        public void Remove(global::ND.MonitorDasboard.Web.Config.Monitor monitor)
        {
            base.BaseRemove(this.GetElementKey(monitor));
        }
        #endregion
        
        #region GetItem
        /// <summary>
        /// Gets the <see cref="global::ND.MonitorDasboard.Web.Config.Monitor"/> at the specified index.
        /// </summary>
        /// <param name="index">The index of the <see cref="global::ND.MonitorDasboard.Web.Config.Monitor"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        public global::ND.MonitorDasboard.Web.Config.Monitor GetItemAt(int index)
        {
            return ((global::ND.MonitorDasboard.Web.Config.Monitor)(base.BaseGet(index)));
        }
        
        /// <summary>
        /// Gets the <see cref="global::ND.MonitorDasboard.Web.Config.Monitor"/> with the specified key.
        /// </summary>
        /// <param name="applicationCode">The key of the <see cref="global::ND.MonitorDasboard.Web.Config.Monitor"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        public global::ND.MonitorDasboard.Web.Config.Monitor GetItemByKey(string applicationCode)
        {
            return ((global::ND.MonitorDasboard.Web.Config.Monitor)(base.BaseGet(((object)(applicationCode)))));
        }
        #endregion
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
    }
}
namespace ND.MonitorDasboard.Web.Config
{
    
    
    /// <summary>
    /// A collection of Node instances.
    /// </summary>
    [global::System.Configuration.ConfigurationCollectionAttribute(typeof(global::ND.MonitorDasboard.Web.Config.Node), CollectionType=global::System.Configuration.ConfigurationElementCollectionType.BasicMapAlternate, AddItemName=global::ND.MonitorDasboard.Web.Config.Nodes.NodePropertyName)]
    public partial class Nodes : global::System.Configuration.ConfigurationElementCollection
    {
        
        #region Constants
        /// <summary>
        /// The XML name of the individual <see cref="global::ND.MonitorDasboard.Web.Config.Node"/> instances in this collection.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        internal const string NodePropertyName = "node";
        #endregion
        
        #region Overrides
        /// <summary>
        /// Gets the type of the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <returns>The <see cref="global::System.Configuration.ConfigurationElementCollectionType"/> of this collection.</returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        public override global::System.Configuration.ConfigurationElementCollectionType CollectionType
        {
            get
            {
                return global::System.Configuration.ConfigurationElementCollectionType.BasicMapAlternate;
            }
        }
        
        /// <summary>
        /// Gets the name used to identify this collection of elements
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        protected override string ElementName
        {
            get
            {
                return global::ND.MonitorDasboard.Web.Config.Nodes.NodePropertyName;
            }
        }
        
        /// <summary>
        /// Indicates whether the specified <see cref="global::System.Configuration.ConfigurationElement"/> exists in the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="elementName">The name of the element to verify.</param>
        /// <returns>
        /// <see langword="true"/> if the element exists in the collection; otherwise, <see langword="false"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        protected override bool IsElementName(string elementName)
        {
            return (elementName == global::ND.MonitorDasboard.Web.Config.Nodes.NodePropertyName);
        }
        
        /// <summary>
        /// Gets the element key for the specified configuration element.
        /// </summary>
        /// <param name="element">The <see cref="global::System.Configuration.ConfigurationElement"/> to return the key for.</param>
        /// <returns>
        /// An <see cref="object"/> that acts as the key for the specified <see cref="global::System.Configuration.ConfigurationElement"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        protected override object GetElementKey(global::System.Configuration.ConfigurationElement element)
        {
            return ((global::ND.MonitorDasboard.Web.Config.Node)(element)).MachineName;
        }
        
        /// <summary>
        /// Creates a new <see cref="global::ND.MonitorDasboard.Web.Config.Node"/>.
        /// </summary>
        /// <returns>
        /// A new <see cref="global::ND.MonitorDasboard.Web.Config.Node"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        protected override global::System.Configuration.ConfigurationElement CreateNewElement()
        {
            return new global::ND.MonitorDasboard.Web.Config.Node();
        }
        #endregion
        
        #region Indexer
        /// <summary>
        /// Gets the <see cref="global::ND.MonitorDasboard.Web.Config.Node"/> at the specified index.
        /// </summary>
        /// <param name="index">The index of the <see cref="global::ND.MonitorDasboard.Web.Config.Node"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        public global::ND.MonitorDasboard.Web.Config.Node this[int index]
        {
            get
            {
                return ((global::ND.MonitorDasboard.Web.Config.Node)(base.BaseGet(index)));
            }
        }
        
        /// <summary>
        /// Gets the <see cref="global::ND.MonitorDasboard.Web.Config.Node"/> with the specified key.
        /// </summary>
        /// <param name="machineName">The key of the <see cref="global::ND.MonitorDasboard.Web.Config.Node"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        public global::ND.MonitorDasboard.Web.Config.Node this[object machineName]
        {
            get
            {
                return ((global::ND.MonitorDasboard.Web.Config.Node)(base.BaseGet(machineName)));
            }
        }
        #endregion
        
        #region Add
        /// <summary>
        /// Adds the specified <see cref="global::ND.MonitorDasboard.Web.Config.Node"/> to the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="node">The <see cref="global::ND.MonitorDasboard.Web.Config.Node"/> to add.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        public void Add(global::ND.MonitorDasboard.Web.Config.Node node)
        {
            base.BaseAdd(node);
        }
        #endregion
        
        #region Remove
        /// <summary>
        /// Removes the specified <see cref="global::ND.MonitorDasboard.Web.Config.Node"/> from the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="node">The <see cref="global::ND.MonitorDasboard.Web.Config.Node"/> to remove.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        public void Remove(global::ND.MonitorDasboard.Web.Config.Node node)
        {
            base.BaseRemove(this.GetElementKey(node));
        }
        #endregion
        
        #region GetItem
        /// <summary>
        /// Gets the <see cref="global::ND.MonitorDasboard.Web.Config.Node"/> at the specified index.
        /// </summary>
        /// <param name="index">The index of the <see cref="global::ND.MonitorDasboard.Web.Config.Node"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        public global::ND.MonitorDasboard.Web.Config.Node GetItemAt(int index)
        {
            return ((global::ND.MonitorDasboard.Web.Config.Node)(base.BaseGet(index)));
        }
        
        /// <summary>
        /// Gets the <see cref="global::ND.MonitorDasboard.Web.Config.Node"/> with the specified key.
        /// </summary>
        /// <param name="machineName">The key of the <see cref="global::ND.MonitorDasboard.Web.Config.Node"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        public global::ND.MonitorDasboard.Web.Config.Node GetItemByKey(string machineName)
        {
            return ((global::ND.MonitorDasboard.Web.Config.Node)(base.BaseGet(((object)(machineName)))));
        }
        #endregion
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
    }
}
namespace ND.MonitorDasboard.Web.Config
{
    
    
    /// <summary>
    /// The Environment Configuration Element.
    /// </summary>
    public partial class Environment : global::System.Configuration.ConfigurationElement
    {
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region Code Property
        /// <summary>
        /// The XML name of the <see cref="Code"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        internal const string CodePropertyName = "code";
        
        /// <summary>
        /// Gets or sets the Code.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        [global::System.ComponentModel.DescriptionAttribute("The Code.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::ND.MonitorDasboard.Web.Config.Environment.CodePropertyName, IsRequired=true, IsKey=true, IsDefaultCollection=false)]
        public virtual string Code
        {
            get
            {
                return ((string)(base[global::ND.MonitorDasboard.Web.Config.Environment.CodePropertyName]));
            }
            set
            {
                base[global::ND.MonitorDasboard.Web.Config.Environment.CodePropertyName] = value;
            }
        }
        #endregion
        
        #region Label Property
        /// <summary>
        /// The XML name of the <see cref="Label"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        internal const string LabelPropertyName = "label";
        
        /// <summary>
        /// Gets or sets the Label.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        [global::System.ComponentModel.DescriptionAttribute("The Label.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::ND.MonitorDasboard.Web.Config.Environment.LabelPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual string Label
        {
            get
            {
                return ((string)(base[global::ND.MonitorDasboard.Web.Config.Environment.LabelPropertyName]));
            }
            set
            {
                base[global::ND.MonitorDasboard.Web.Config.Environment.LabelPropertyName] = value;
            }
        }
        #endregion
    }
}
namespace ND.MonitorDasboard.Web.Config
{
    
    
    /// <summary>
    /// A collection of Cluster instances.
    /// </summary>
    [global::System.Configuration.ConfigurationCollectionAttribute(typeof(global::ND.MonitorDasboard.Web.Config.Cluster), CollectionType=global::System.Configuration.ConfigurationElementCollectionType.BasicMapAlternate, AddItemName=global::ND.MonitorDasboard.Web.Config.Clusters.ClusterPropertyName)]
    public partial class Clusters : global::System.Configuration.ConfigurationElementCollection
    {
        
        #region Constants
        /// <summary>
        /// The XML name of the individual <see cref="global::ND.MonitorDasboard.Web.Config.Cluster"/> instances in this collection.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        internal const string ClusterPropertyName = "cluster";
        #endregion
        
        #region Overrides
        /// <summary>
        /// Gets the type of the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <returns>The <see cref="global::System.Configuration.ConfigurationElementCollectionType"/> of this collection.</returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        public override global::System.Configuration.ConfigurationElementCollectionType CollectionType
        {
            get
            {
                return global::System.Configuration.ConfigurationElementCollectionType.BasicMapAlternate;
            }
        }
        
        /// <summary>
        /// Gets the name used to identify this collection of elements
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        protected override string ElementName
        {
            get
            {
                return global::ND.MonitorDasboard.Web.Config.Clusters.ClusterPropertyName;
            }
        }
        
        /// <summary>
        /// Indicates whether the specified <see cref="global::System.Configuration.ConfigurationElement"/> exists in the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="elementName">The name of the element to verify.</param>
        /// <returns>
        /// <see langword="true"/> if the element exists in the collection; otherwise, <see langword="false"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        protected override bool IsElementName(string elementName)
        {
            return (elementName == global::ND.MonitorDasboard.Web.Config.Clusters.ClusterPropertyName);
        }
        
        /// <summary>
        /// Gets the element key for the specified configuration element.
        /// </summary>
        /// <param name="element">The <see cref="global::System.Configuration.ConfigurationElement"/> to return the key for.</param>
        /// <returns>
        /// An <see cref="object"/> that acts as the key for the specified <see cref="global::System.Configuration.ConfigurationElement"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        protected override object GetElementKey(global::System.Configuration.ConfigurationElement element)
        {
            return ((global::ND.MonitorDasboard.Web.Config.Cluster)(element)).Code;
        }
        
        /// <summary>
        /// Creates a new <see cref="global::ND.MonitorDasboard.Web.Config.Cluster"/>.
        /// </summary>
        /// <returns>
        /// A new <see cref="global::ND.MonitorDasboard.Web.Config.Cluster"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        protected override global::System.Configuration.ConfigurationElement CreateNewElement()
        {
            return new global::ND.MonitorDasboard.Web.Config.Cluster();
        }
        #endregion
        
        #region Indexer
        /// <summary>
        /// Gets the <see cref="global::ND.MonitorDasboard.Web.Config.Cluster"/> at the specified index.
        /// </summary>
        /// <param name="index">The index of the <see cref="global::ND.MonitorDasboard.Web.Config.Cluster"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        public global::ND.MonitorDasboard.Web.Config.Cluster this[int index]
        {
            get
            {
                return ((global::ND.MonitorDasboard.Web.Config.Cluster)(base.BaseGet(index)));
            }
        }
        
        /// <summary>
        /// Gets the <see cref="global::ND.MonitorDasboard.Web.Config.Cluster"/> with the specified key.
        /// </summary>
        /// <param name="code">The key of the <see cref="global::ND.MonitorDasboard.Web.Config.Cluster"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        public global::ND.MonitorDasboard.Web.Config.Cluster this[object code]
        {
            get
            {
                return ((global::ND.MonitorDasboard.Web.Config.Cluster)(base.BaseGet(code)));
            }
        }
        #endregion
        
        #region Add
        /// <summary>
        /// Adds the specified <see cref="global::ND.MonitorDasboard.Web.Config.Cluster"/> to the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="cluster">The <see cref="global::ND.MonitorDasboard.Web.Config.Cluster"/> to add.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        public void Add(global::ND.MonitorDasboard.Web.Config.Cluster cluster)
        {
            base.BaseAdd(cluster);
        }
        #endregion
        
        #region Remove
        /// <summary>
        /// Removes the specified <see cref="global::ND.MonitorDasboard.Web.Config.Cluster"/> from the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="cluster">The <see cref="global::ND.MonitorDasboard.Web.Config.Cluster"/> to remove.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        public void Remove(global::ND.MonitorDasboard.Web.Config.Cluster cluster)
        {
            base.BaseRemove(this.GetElementKey(cluster));
        }
        #endregion
        
        #region GetItem
        /// <summary>
        /// Gets the <see cref="global::ND.MonitorDasboard.Web.Config.Cluster"/> at the specified index.
        /// </summary>
        /// <param name="index">The index of the <see cref="global::ND.MonitorDasboard.Web.Config.Cluster"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        public global::ND.MonitorDasboard.Web.Config.Cluster GetItemAt(int index)
        {
            return ((global::ND.MonitorDasboard.Web.Config.Cluster)(base.BaseGet(index)));
        }
        
        /// <summary>
        /// Gets the <see cref="global::ND.MonitorDasboard.Web.Config.Cluster"/> with the specified key.
        /// </summary>
        /// <param name="code">The key of the <see cref="global::ND.MonitorDasboard.Web.Config.Cluster"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        public global::ND.MonitorDasboard.Web.Config.Cluster GetItemByKey(string code)
        {
            return ((global::ND.MonitorDasboard.Web.Config.Cluster)(base.BaseGet(((object)(code)))));
        }
        #endregion
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
    }
}
namespace ND.MonitorDasboard.Web.Config
{
    
    
    /// <summary>
    /// The MonitorDashoardConfiguration Configuration Section.
    /// </summary>
    public partial class MonitorDashoardConfiguration : global::System.Configuration.ConfigurationSection
    {
        
        #region Singleton Instance
        /// <summary>
        /// The XML name of the MonitorDashoardConfiguration Configuration Section.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        internal const string MonitorDashoardConfigurationSectionName = "monitorDashoardConfiguration";
        
        /// <summary>
        /// The XML path of the MonitorDashoardConfiguration Configuration Section.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        internal const string MonitorDashoardConfigurationSectionPath = "monitorDashoardConfiguration";
        
        /// <summary>
        /// Gets the MonitorDashoardConfiguration instance.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        public static global::ND.MonitorDasboard.Web.Config.MonitorDashoardConfiguration Instance
        {
            get
            {
                return ((global::ND.MonitorDasboard.Web.Config.MonitorDashoardConfiguration)(global::System.Configuration.ConfigurationManager.GetSection(global::ND.MonitorDasboard.Web.Config.MonitorDashoardConfiguration.MonitorDashoardConfigurationSectionPath)));
            }
        }
        #endregion
        
        #region Xmlns Property
        /// <summary>
        /// The XML name of the <see cref="Xmlns"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        internal const string XmlnsPropertyName = "xmlns";
        
        /// <summary>
        /// Gets the XML namespace of this Configuration Section.
        /// </summary>
        /// <remarks>
        /// This property makes sure that if the configuration file contains the XML namespace,
        /// the parser doesn't throw an exception because it encounters the unknown "xmlns" attribute.
        /// </remarks>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::ND.MonitorDasboard.Web.Config.MonitorDashoardConfiguration.XmlnsPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public string Xmlns
        {
            get
            {
                return ((string)(base[global::ND.MonitorDasboard.Web.Config.MonitorDashoardConfiguration.XmlnsPropertyName]));
            }
        }
        #endregion
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region Clusters Property
        /// <summary>
        /// The XML name of the <see cref="Clusters"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        internal const string ClustersPropertyName = "clusters";
        
        /// <summary>
        /// Gets or sets the Clusters.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        [global::System.ComponentModel.DescriptionAttribute("The Clusters.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::ND.MonitorDasboard.Web.Config.MonitorDashoardConfiguration.ClustersPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual global::ND.MonitorDasboard.Web.Config.Clusters Clusters
        {
            get
            {
                return ((global::ND.MonitorDasboard.Web.Config.Clusters)(base[global::ND.MonitorDasboard.Web.Config.MonitorDashoardConfiguration.ClustersPropertyName]));
            }
            set
            {
                base[global::ND.MonitorDasboard.Web.Config.MonitorDashoardConfiguration.ClustersPropertyName] = value;
            }
        }
        #endregion
        
        #region Monitors Property
        /// <summary>
        /// The XML name of the <see cref="Monitors"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        internal const string MonitorsPropertyName = "monitors";
        
        /// <summary>
        /// Gets or sets the Monitors.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        [global::System.ComponentModel.DescriptionAttribute("The Monitors.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::ND.MonitorDasboard.Web.Config.MonitorDashoardConfiguration.MonitorsPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual global::ND.MonitorDasboard.Web.Config.Monitors Monitors
        {
            get
            {
                return ((global::ND.MonitorDasboard.Web.Config.Monitors)(base[global::ND.MonitorDasboard.Web.Config.MonitorDashoardConfiguration.MonitorsPropertyName]));
            }
            set
            {
                base[global::ND.MonitorDasboard.Web.Config.MonitorDashoardConfiguration.MonitorsPropertyName] = value;
            }
        }
        #endregion
    }
}
